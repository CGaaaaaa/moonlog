// Generated using `moon info`, DON'T EDIT IT
package "moonlog"

import(
  "moonbitlang/core/builtin"
)

// Values
fn debug(String) -> Unit

fn debug_with_fields(String, Array[LogField]) -> Unit

fn error(String) -> Unit

fn error_with_fields(String, Array[LogField]) -> Unit

fn fatal(String) -> Unit

fn fatal_with_fields(String, Array[LogField]) -> Unit

fn field_bool(String, Bool) -> LogField

fn field_double(String, Double) -> LogField

fn field_int(String, Int) -> LogField

fn field_str(String, String) -> LogField

fn get_global_logger() -> Logger

fn info(String) -> Unit

fn info_with_fields(String, Array[LogField]) -> Unit

fn set_global_level(LogLevel) -> Unit

fn set_global_logger(Logger) -> Unit

fn trace(String) -> Unit

fn trace_with_fields(String, Array[LogField]) -> Unit

fn warn(String) -> Unit

fn warn_with_fields(String, Array[LogField]) -> Unit

// Errors

// Types and methods
pub enum AppenderBox {
  Box((LogEntry) -> Unit)
}
fn[A : Appender] AppenderBox::from(A) -> Self

pub struct LogEntry {
  level : LogLevel
  message : String
  fields : Array[LogField]
  module_name : String
  timestamp : Int64
}
fn LogEntry::new(LogLevel, String, Array[LogField], String) -> Self

pub struct LogField {
  key : String
  value : LogValue
}
fn LogField::new(String, LogValue) -> Self
fn LogField::to_string(Self) -> String
impl Eq for LogField
impl Show for LogField

pub enum LogLevel {
  Trace
  Debug
  Info
  Warn
  Error
  Fatal
}
fn LogLevel::to_int(Self) -> Int
fn LogLevel::to_string(Self) -> String
impl Compare for LogLevel
impl Eq for LogLevel
impl Show for LogLevel

pub enum LogValue {
  String(String)
  Int(Int)
  Double(Double)
  Bool(Bool)
}
fn LogValue::to_string(Self) -> String
impl Eq for LogValue
impl Show for LogValue

pub struct Logger {
  appenders : Array[AppenderBox]
  min_level : LogLevel
  module_name : String
}
fn[A : Appender] Logger::add_appender(Self, A) -> Self
fn Logger::log(Self, LogLevel, String, Array[LogField]) -> Unit
fn Logger::new(LogLevel, String) -> Self
fn Logger::set_level(Self, LogLevel) -> Self
fn Logger::set_module(Self, String) -> Self

pub struct StdoutAppender {
  show_timestamp : Bool
  show_module : Bool
}
fn StdoutAppender::new() -> Self
fn StdoutAppender::with_config(Bool, Bool) -> Self

// Type aliases

// Traits
pub trait Appender {
  append(Self, LogEntry) -> Unit
}

